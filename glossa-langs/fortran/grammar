statement: `@statement main | definition | declaration | if | print | whileloop | case | rangeloop | comment | infiniteloop | conditionalexit | array | array_init | function | assignment | implicit | intent | interface | functioncall | datatype`

main: 'PROGRAM' `identifier **` `@body *statement` 'END' 'PROGRAM'
implicit: 'IMPLICIT' 'NONE'

typename: `@val 'REAL' | 'INTEGER'`

declaration: `@type typename` `optional '::'` `@identifier identifier **` 
definition: `@type typename` `@const optional inOrder punctuator , identifier PARAMETER` '::' `@identifier identifier **` '=' `@expr link expression` 
assignment: `@identifier identifier **` `@op operator =` `@value expression`

value: `@val functioncall | basevalue | parenexpr`
basevalue: `@val identifier ** | string | literal **`
parenexpr: '(' `@expr expression` ')'
string: `@val literal string`

expression: `@body sepWithKeep operator ** value`
boolexpression: `@body sepWithKeep logicaloperator ** expression` 

if: 'IF' '(' `@condition boolexpression` ')' 'THEN' `@body *statement` `@branches branch`

branch: `@elifs *elif` `@else optional else` 'END' 'IF'

elif: 'ELSE' 'IF' '(' `@condition boolexpression` ')' 'THEN' `@body *statement`

else: 'ELSE' `@body *statement`

print: 'WRITE' '(' `operator *` ',' `operator *` ')' `@val expression`

whileloop: 'DO' 'WHILE' '(' `@boolexpr boolexpression` ')' `@body *statement` 'END' 'DO'
infiniteloop: 'DO' `@body *statement` 'END' 'DO'

conditionalexit: `@boolexpr boolexpression` 'EXIT'

case: 'SELECT' 'CASE' '(' `@selector expression` ')' `@cases *sub_case` `optional inOrder identifier CASE identifier DEFAULT` `@default_body *statement` 'END' 'SELECT'
sub_case: 'CASE' '(' `@val expression` ')' `@body *statement`

rangeloop: 'DO' `@index_var identifier **` '=' `@start literal int` `@end literal int` `@step optional literal int` `@body *statement` 'END' 'DO'

comment: `@comment comment **`

array: `@type identifier **` ',' 'DIMENSION' '(' `@dims sep ',' literal int` ')' '::' `@name identifier **`
array_init: `@name identifier **` '=' '(' '/' `@values sep ',' literal **` '/' ')'

function: 'FUNCTION' `@name identifier **` '(' `@args optional sep ',' identifier **` ')' `@body *statement` 'END' 'FUNCTION' `identifier **`
intent: `@type typename` ',' 'INTENT' '(' `@intent identifier **` ')' '::' `@name identifier **`
interface: 'INTERFACE' `@body *statement` 'END' 'INTERFACE'

functioncall: `@identifier identifier **` '(' `@args optional sep ',' expression` ')'

datastatement: `@val declaration`
datatype: 'TYPE' `@name identifier **` `@body *datastatement` 'END' 'TYPE'
